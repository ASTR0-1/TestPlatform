// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPlatform.Infrastructure.Persistence;

#nullable disable

namespace TestPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3e9ee344-862b-40a4-a1bd-f5e0dd1b78f3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OptionNumber")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            OptionNumber = 4,
                            OptionText = "OptionText4",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = true,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            OptionNumber = 4,
                            OptionText = "OptionText4",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = true,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = true,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = true,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = false,
                            OptionNumber = 4,
                            OptionText = "OptionText4",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = true,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = false,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = false,
                            OptionNumber = 4,
                            OptionText = "OptionText4",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = true,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            OptionNumber = 1,
                            OptionText = "OptionText1",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = false,
                            OptionNumber = 2,
                            OptionText = "OptionText2",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = true,
                            OptionNumber = 3,
                            OptionText = "OptionText3",
                            QuestionId = 8
                        });
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionNumber = 1,
                            QuestionText = "Question1",
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            QuestionNumber = 2,
                            QuestionText = "Question2",
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            QuestionNumber = 3,
                            QuestionText = "Question3",
                            TestId = 1
                        },
                        new
                        {
                            Id = 4,
                            QuestionNumber = 4,
                            QuestionText = "Question4",
                            TestId = 1
                        },
                        new
                        {
                            Id = 5,
                            QuestionNumber = 1,
                            QuestionText = "Question1",
                            TestId = 2
                        },
                        new
                        {
                            Id = 6,
                            QuestionNumber = 2,
                            QuestionText = "Question2",
                            TestId = 2
                        },
                        new
                        {
                            Id = 7,
                            QuestionNumber = 3,
                            QuestionText = "Question3",
                            TestId = 2
                        },
                        new
                        {
                            Id = 8,
                            QuestionNumber = 4,
                            QuestionText = "Question4",
                            TestId = 2
                        });
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for test1",
                            QuestionCount = 4,
                            Title = "Test1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for test2",
                            QuestionCount = 4,
                            Title = "Test2"
                        });
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c622711-0423-40c3-8e8d-3cd8fe0590ef",
                            Email = "email1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "FN1",
                            LastName = "LN1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAIL1@GMAIL.COM",
                            NormalizedUserName = "EMAIL1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPpR/yIL8ZA8WgW8p7W7uxSnYOAbmKIohl7PbYYeAaIVmSsmMMN9wn859TbyDrRHxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "227df544-2733-4d22-b0b5-c4dea1b57494",
                            TwoFactorEnabled = false,
                            UserName = "email1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b241220-b3d0-4da5-a173-2b45d70a208a",
                            Email = "email2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "FN2",
                            LastName = "LN2",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAIL2@GMAIL.COM",
                            NormalizedUserName = "EMAIL2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEACW5PZJSDzeC5BlkIJ63YgwgCnj8TZPZhXTynj1fg/7WvHTuUgeAmYfuJDNW+07hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8c144df-3487-4480-bf04-b744e936d364",
                            TwoFactorEnabled = false,
                            UserName = "email2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d316dcb4-a2c7-4145-9223-45be56c9d9d4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "AFN",
                            LastName = "ALN",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAmUlOEt/JW6EQZqbK2Ih8ki34N0aEPrCcsYxyXe+AZVgl+OPb6zCel1/eHZLPms2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42c20619-7b66-4286-9414-4ce1ad7647e1",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.UserTest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Answers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("UserTest");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TestId = 1,
                            FinishTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Rating = 0
                        },
                        new
                        {
                            UserId = 2,
                            TestId = 2,
                            FinishTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.AnswerOption", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.Question", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.UserTest", b =>
                {
                    b.HasOne("TestPlatform.Domain.Entities.Test", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestPlatform.Domain.Entities.User", "User")
                        .WithMany("UserTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("TestPlatform.Domain.Entities.User", b =>
                {
                    b.Navigation("UserTests");
                });
#pragma warning restore 612, 618
        }
    }
}
